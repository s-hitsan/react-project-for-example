{"version":3,"sources":["components/FormValidation/LoginFormSchema.jsx","components/Login/Login.jsx"],"names":["loginFormSchema","Yup","shape","email","min","max","required","password","FormLogin","login","errors","initialValues","rememberMe","validateOnBlur","onSubmit","values","validationSchema","isSubmitting","htmlFor","createField","Input","type","name","disabled","connect","state","isAuth","auth","to"],"mappings":"oJAceA,EAVSC,MAAaC,MAAM,CACzCC,MAAOF,MACJG,IAAI,EAAG,oCACPC,IAAI,GAAI,+CACRC,SAAS,YACZC,SAAUN,MACPG,IAAI,EAAG,oCACPE,SAAS,c,sCCORE,EAAY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACzB,OACE,cAAC,IAAD,CACEC,cAAe,CAAER,MAAO,GAAII,SAAU,GAAIK,YAAY,GACtDC,gBAAc,EACdC,SAAU,SAACC,GAAD,OAAYN,EAAMM,IAC5BC,iBAAkBhB,EAJpB,SAKG,gBAAGiB,EAAH,EAAGA,aAAH,OACC,eAAC,IAAD,WACE,8BACE,uBAAOC,QAAS,QAAhB,kCADF,IACyC,uBACtCC,YAAY,SAAU,OAAQ,QAASC,QAE1C,8BACE,uBAAOF,QAAS,WAAhB,oDADF,IAC+C,uBAC5CC,YAAY,WAAY,WAAY,WAAYC,QAEnD,8BACE,cAAC,IAAD,CAAOC,KAAM,WAAYC,KAAM,eAC/B,uBAAOJ,QAAS,aAAhB,8BAEF,4BAAIR,IACHA,EAASO,GAAa,EAAQ,KAC/B,wBAAQM,SAAUN,EAAeI,KAAM,SAAvC,yBAYKG,uBALS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBhB,OAAQe,EAAME,KAAKjB,UAGmB,CAAED,WAA3Be,EA7CD,SAAC,GAA6B,IAA5BE,EAA2B,EAA3BA,OAAQjB,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC7B,OAAIgB,EACK,cAAC,IAAD,CAAUE,GAAI,aAEhB,gCACL,uCACA,cAAC,EAAD,CAAWnB,MAAOA,EAAOC,OAAQA","file":"static/js/8.b2771bb1.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\n\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a first name that long\")\r\n    .required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(7, \"Must be longer than 7 characters\")\r\n    .required(\"Required\")\r\n});\r\n\r\nexport default loginFormSchema;","import { Formik, Form, Field } from \"formik\";\r\nimport loginFormSchema from \"../FormValidation/LoginFormSchema\";\r\nimport { Input, createField } from \"../common/FormsControls/FormsControls\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nconst Login = ({isAuth, login, errors}) => {\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />\r\n  }\r\n  return <div>\r\n    <h1>Login</h1>\r\n    <FormLogin login={login} errors={errors}/>\r\n  </div>\r\n};\r\n\r\nconst FormLogin = ({login, errors}) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\", rememberMe: false }}\r\n      validateOnBlur\r\n      onSubmit={(values) => login(values)}\r\n      validationSchema={loginFormSchema}>\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          <p>\r\n            <label htmlFor={'email'}> Имя </label> <br />\r\n            {createField('e-mail', 'text', 'email', Input)}\r\n          </p>\r\n          <p>\r\n            <label htmlFor={'password'}> Пароль </label> <br />\r\n            {createField('password', 'password', 'password', Input)}\r\n          </p>\r\n          <p>\r\n            <Field type={'checkbox'} name={'rememberMe'} />\r\n            <label htmlFor={'rememberMe'}> remember me </label>\r\n          </p>\r\n          <p>{errors}</p> \r\n          {errors ? isSubmitting=false : null}\r\n          <button disabled={isSubmitting}  type={'submit'}>Send</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  errors: state.auth.errors\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)"],"sourceRoot":""}